import {
  require_react
} from "./chunk-ZGRSIX2Q.js";
import {
  __commonJS
} from "./chunk-ROME4SDB.js";

// node_modules/react-animated-text/build/index.js
var require_build = __commonJS({
  "node_modules/react-animated-text/build/index.js"(exports, module) {
    module.exports = /******/
    function(modules) {
      var installedModules = {};
      function __webpack_require__(moduleId) {
        if (installedModules[moduleId]) {
          return installedModules[moduleId].exports;
        }
        var module2 = installedModules[moduleId] = {
          /******/
          i: moduleId,
          /******/
          l: false,
          /******/
          exports: {}
          /******/
        };
        modules[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
        module2.l = true;
        return module2.exports;
      }
      __webpack_require__.m = modules;
      __webpack_require__.c = installedModules;
      __webpack_require__.i = function(value) {
        return value;
      };
      __webpack_require__.d = function(exports2, name, getter) {
        if (!__webpack_require__.o(exports2, name)) {
          Object.defineProperty(exports2, name, {
            /******/
            configurable: false,
            /******/
            enumerable: true,
            /******/
            get: getter
            /******/
          });
        }
      };
      __webpack_require__.n = function(module2) {
        var getter = module2 && module2.__esModule ? (
          /******/
          function getDefault() {
            return module2["default"];
          }
        ) : (
          /******/
          function getModuleExports() {
            return module2;
          }
        );
        __webpack_require__.d(getter, "a", getter);
        return getter;
      };
      __webpack_require__.o = function(object, property) {
        return Object.prototype.hasOwnProperty.call(object, property);
      };
      __webpack_require__.p = "";
      return __webpack_require__(__webpack_require__.s = 12);
    }([
      /* 0 */
      /***/
      function(module2, exports2) {
        var process = module2.exports = {};
        var cachedSetTimeout;
        var cachedClearTimeout;
        function defaultSetTimout() {
          throw new Error("setTimeout has not been defined");
        }
        function defaultClearTimeout() {
          throw new Error("clearTimeout has not been defined");
        }
        (function() {
          try {
            if (typeof setTimeout === "function") {
              cachedSetTimeout = setTimeout;
            } else {
              cachedSetTimeout = defaultSetTimout;
            }
          } catch (e) {
            cachedSetTimeout = defaultSetTimout;
          }
          try {
            if (typeof clearTimeout === "function") {
              cachedClearTimeout = clearTimeout;
            } else {
              cachedClearTimeout = defaultClearTimeout;
            }
          } catch (e) {
            cachedClearTimeout = defaultClearTimeout;
          }
        })();
        function runTimeout(fun) {
          if (cachedSetTimeout === setTimeout) {
            return setTimeout(fun, 0);
          }
          if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
            cachedSetTimeout = setTimeout;
            return setTimeout(fun, 0);
          }
          try {
            return cachedSetTimeout(fun, 0);
          } catch (e) {
            try {
              return cachedSetTimeout.call(null, fun, 0);
            } catch (e2) {
              return cachedSetTimeout.call(this, fun, 0);
            }
          }
        }
        function runClearTimeout(marker) {
          if (cachedClearTimeout === clearTimeout) {
            return clearTimeout(marker);
          }
          if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
            cachedClearTimeout = clearTimeout;
            return clearTimeout(marker);
          }
          try {
            return cachedClearTimeout(marker);
          } catch (e) {
            try {
              return cachedClearTimeout.call(null, marker);
            } catch (e2) {
              return cachedClearTimeout.call(this, marker);
            }
          }
        }
        var queue = [];
        var draining = false;
        var currentQueue;
        var queueIndex = -1;
        function cleanUpNextTick() {
          if (!draining || !currentQueue) {
            return;
          }
          draining = false;
          if (currentQueue.length) {
            queue = currentQueue.concat(queue);
          } else {
            queueIndex = -1;
          }
          if (queue.length) {
            drainQueue();
          }
        }
        function drainQueue() {
          if (draining) {
            return;
          }
          var timeout = runTimeout(cleanUpNextTick);
          draining = true;
          var len = queue.length;
          while (len) {
            currentQueue = queue;
            queue = [];
            while (++queueIndex < len) {
              if (currentQueue) {
                currentQueue[queueIndex].run();
              }
            }
            queueIndex = -1;
            len = queue.length;
          }
          currentQueue = null;
          draining = false;
          runClearTimeout(timeout);
        }
        process.nextTick = function(fun) {
          var args = new Array(arguments.length - 1);
          if (arguments.length > 1) {
            for (var i = 1; i < arguments.length; i++) {
              args[i - 1] = arguments[i];
            }
          }
          queue.push(new Item(fun, args));
          if (queue.length === 1 && !draining) {
            runTimeout(drainQueue);
          }
        };
        function Item(fun, array) {
          this.fun = fun;
          this.array = array;
        }
        Item.prototype.run = function() {
          this.fun.apply(null, this.array);
        };
        process.title = "browser";
        process.browser = true;
        process.env = {};
        process.argv = [];
        process.version = "";
        process.versions = {};
        function noop() {
        }
        process.on = noop;
        process.addListener = noop;
        process.once = noop;
        process.off = noop;
        process.removeListener = noop;
        process.removeAllListeners = noop;
        process.emit = noop;
        process.prependListener = noop;
        process.prependOnceListener = noop;
        process.listeners = function(name) {
          return [];
        };
        process.binding = function(name) {
          throw new Error("process.binding is not supported");
        };
        process.cwd = function() {
          return "/";
        };
        process.chdir = function(dir) {
          throw new Error("process.chdir is not supported");
        };
        process.umask = function() {
          return 0;
        };
      },
      /* 1 */
      /***/
      function(module2, exports2) {
        module2.exports = require_react();
      },
      /* 2 */
      /***/
      function(module2, exports2, __webpack_require__) {
        "use strict";
        (function(process) {
          var validateFormat = function validateFormat2(format) {
          };
          if (process.env.NODE_ENV !== "production") {
            validateFormat = function validateFormat2(format) {
              if (format === void 0) {
                throw new Error("invariant requires an error message argument");
              }
            };
          }
          function invariant(condition, format, a, b, c, d, e, f) {
            validateFormat(format);
            if (!condition) {
              var error;
              if (format === void 0) {
                error = new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");
              } else {
                var args = [a, b, c, d, e, f];
                var argIndex = 0;
                error = new Error(format.replace(/%s/g, function() {
                  return args[argIndex++];
                }));
                error.name = "Invariant Violation";
              }
              error.framesToPop = 1;
              throw error;
            }
          }
          module2.exports = invariant;
        }).call(exports2, __webpack_require__(0));
      },
      /* 3 */
      /***/
      function(module2, exports2, __webpack_require__) {
        "use strict";
        function makeEmptyFunction(arg) {
          return function() {
            return arg;
          };
        }
        var emptyFunction = function emptyFunction2() {
        };
        emptyFunction.thatReturns = makeEmptyFunction;
        emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
        emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
        emptyFunction.thatReturnsNull = makeEmptyFunction(null);
        emptyFunction.thatReturnsThis = function() {
          return this;
        };
        emptyFunction.thatReturnsArgument = function(arg) {
          return arg;
        };
        module2.exports = emptyFunction;
      },
      /* 4 */
      /***/
      function(module2, exports2, __webpack_require__) {
        "use strict";
        (function(process) {
          var emptyFunction = __webpack_require__(3);
          var warning = emptyFunction;
          if (process.env.NODE_ENV !== "production") {
            var printWarning = function printWarning2(format) {
              for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              var argIndex = 0;
              var message = "Warning: " + format.replace(/%s/g, function() {
                return args[argIndex++];
              });
              if (typeof console !== "undefined") {
                console.error(message);
              }
              try {
                throw new Error(message);
              } catch (x) {
              }
            };
            warning = function warning2(condition, format) {
              if (format === void 0) {
                throw new Error("`warning(condition, format, ...args)` requires a warning message argument");
              }
              if (format.indexOf("Failed Composite propType: ") === 0) {
                return;
              }
              if (!condition) {
                for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
                  args[_key2 - 2] = arguments[_key2];
                }
                printWarning.apply(void 0, [format].concat(args));
              }
            };
          }
          module2.exports = warning;
        }).call(exports2, __webpack_require__(0));
      },
      /* 5 */
      /***/
      function(module2, exports2, __webpack_require__) {
        "use strict";
        var getOwnPropertySymbols = Object.getOwnPropertySymbols;
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        var propIsEnumerable = Object.prototype.propertyIsEnumerable;
        function toObject(val) {
          if (val === null || val === void 0) {
            throw new TypeError("Object.assign cannot be called with null or undefined");
          }
          return Object(val);
        }
        function shouldUseNative() {
          try {
            if (!Object.assign) {
              return false;
            }
            var test1 = new String("abc");
            test1[5] = "de";
            if (Object.getOwnPropertyNames(test1)[0] === "5") {
              return false;
            }
            var test2 = {};
            for (var i = 0; i < 10; i++) {
              test2["_" + String.fromCharCode(i)] = i;
            }
            var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
              return test2[n];
            });
            if (order2.join("") !== "0123456789") {
              return false;
            }
            var test3 = {};
            "abcdefghijklmnopqrst".split("").forEach(function(letter) {
              test3[letter] = letter;
            });
            if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
              return false;
            }
            return true;
          } catch (err) {
            return false;
          }
        }
        module2.exports = shouldUseNative() ? Object.assign : function(target, source) {
          var from;
          var to = toObject(target);
          var symbols;
          for (var s = 1; s < arguments.length; s++) {
            from = Object(arguments[s]);
            for (var key in from) {
              if (hasOwnProperty.call(from, key)) {
                to[key] = from[key];
              }
            }
            if (getOwnPropertySymbols) {
              symbols = getOwnPropertySymbols(from);
              for (var i = 0; i < symbols.length; i++) {
                if (propIsEnumerable.call(from, symbols[i])) {
                  to[symbols[i]] = from[symbols[i]];
                }
              }
            }
          }
          return to;
        };
      },
      /* 6 */
      /***/
      function(module2, exports2, __webpack_require__) {
        (function(process) {
          if (process.env.NODE_ENV !== "production") {
            var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 60103;
            var isValidElement = function(object) {
              return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
            };
            var throwOnDirectAccess = true;
            module2.exports = __webpack_require__(20)(isValidElement, throwOnDirectAccess);
          } else {
            module2.exports = __webpack_require__(19)();
          }
        }).call(exports2, __webpack_require__(0));
      },
      /* 7 */
      /***/
      function(module2, exports2, __webpack_require__) {
        "use strict";
        var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
        module2.exports = ReactPropTypesSecret;
      },
      /* 8 */
      /***/
      function(module2, exports2, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", {
          value: true
        });
        var _createClass = function() {
          function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
              var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ("value" in descriptor)
                descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }
          return function(Constructor, protoProps, staticProps) {
            if (protoProps)
              defineProperties(Constructor.prototype, protoProps);
            if (staticProps)
              defineProperties(Constructor, staticProps);
            return Constructor;
          };
        }();
        var _react = __webpack_require__(1);
        var _react2 = _interopRequireDefault(_react);
        var _propTypes = __webpack_require__(6);
        var _propTypes2 = _interopRequireDefault(_propTypes);
        var _reactTimeout = __webpack_require__(22);
        var _reactTimeout2 = _interopRequireDefault(_reactTimeout);
        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj };
        }
        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }
        function _possibleConstructorReturn(self, call) {
          if (!self) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          }
          return call && (typeof call === "object" || typeof call === "function") ? call : self;
        }
        function _inherits(subClass, superClass) {
          if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
          }
          subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
          if (superClass)
            Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var propTypes = {
          animationName: _propTypes2.default.string.isRequired,
          animationStyles: _propTypes2.default.object.isRequired,
          wrapperStyles: _propTypes2.default.object.isRequired,
          animRequiresPauseAtEnd: _propTypes2.default.bool.isRequired,
          nextMS: _propTypes2.default.func.isRequired,
          paused: _propTypes2.default.bool.isRequired,
          manualIterations: _propTypes2.default.number
        };
        var defaultProps = {
          manualIterations: 99999
        };
        var AnimatedLetter = function(_React$Component) {
          _inherits(AnimatedLetter2, _React$Component);
          function AnimatedLetter2(props) {
            _classCallCheck(this, AnimatedLetter2);
            var _this = _possibleConstructorReturn(this, (AnimatedLetter2.__proto__ || Object.getPrototypeOf(AnimatedLetter2)).call(this, props));
            _this.state = {
              animationCount: 0,
              paused: props.animRequiresPauseAtEnd,
              parentPaused: props.paused
            };
            return _this;
          }
          _createClass(AnimatedLetter2, [{
            key: "componentDidMount",
            value: function componentDidMount() {
              if (!this.state.parentPaused) {
                this.componentReadyToAnimate();
              } else {
                this.pause();
              }
            }
          }, {
            key: "shouldComponentUpdate",
            value: function shouldComponentUpdate(nextProps, nextState) {
              return this.state.paused !== nextState.paused;
            }
          }, {
            key: "componentDidUpdate",
            value: function componentDidUpdate() {
              this.componentReadyToAnimate();
            }
          }, {
            key: "componentReadyToAnimate",
            value: function componentReadyToAnimate() {
              var _this2 = this;
              if (!this.state.paused && this.props.animRequiresPauseAtEnd) {
                this.animSpan.addEventListener("animationend", function() {
                  return _this2.pause();
                });
              }
              if (this.state.paused && this.state.animationCount < this.props.manualIterations) {
                this.props.setTimeout(function() {
                  return _this2.play();
                }, this.props.nextMS());
              }
            }
          }, {
            key: "pause",
            value: function pause() {
              this.setState({ paused: true });
            }
          }, {
            key: "play",
            value: function play() {
              this.setState({
                paused: false,
                animationCount: this.state.animationCount + 1
              });
            }
          }, {
            key: "render",
            value: function render() {
              var _this3 = this;
              var staticClasses = [];
              staticClasses[0] = "initial_" + this.props.animationName;
              staticClasses[this.props.manualIterations] = "final_" + this.props.animationName;
              return _react2.default.createElement(
                "span",
                { style: this.props.wrapperStyles },
                this.state.paused ? _react2.default.createElement(
                  "span",
                  { className: staticClasses[this.state.animationCount] },
                  this.props.children
                ) : _react2.default.createElement(
                  "span",
                  {
                    ref: function ref(c) {
                      return _this3.animSpan = c;
                    },
                    style: this.props.animationStyles
                  },
                  this.props.children
                )
              );
            }
          }]);
          return AnimatedLetter2;
        }(_react2.default.Component);
        exports2.default = (0, _reactTimeout2.default)(AnimatedLetter);
      },
      /* 9 */
      /***/
      function(module2, exports2, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", {
          value: true
        });
        exports2.cleanupCSS = exports2.generateCSS = void 0;
        var _effectData = __webpack_require__(13);
        var Effects = _interopRequireWildcard(_effectData);
        var _styleSheets = __webpack_require__(14);
        var Styles = _interopRequireWildcard(_styleSheets);
        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};
            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key))
                  newObj[key] = obj[key];
              }
            }
            newObj.default = obj;
            return newObj;
          }
        }
        var generateCSS = exports2.generateCSS = function generateCSS2(_ref) {
          var effect = _ref.effect, effectLastKeyframe = _ref.effectLastKeyframe, effectChange = _ref.effectChange, effectDirection = _ref.effectDirection, animationName = _ref.animationName;
          var effectData = Effects.getDefinition({
            effect,
            effectChange,
            effectDirection
          });
          var keyFrameData = Effects.keyframeTemplates({ effectData });
          var keyFramePercentages = keyFrameData[effectData.keyFrames].map(function(frame) {
            var d = frame[0] === "x" ? 100 : effectLastKeyframe * frame[0];
            return d + "% { " + frame[1] + " }";
          });
          var frames = "@keyframes " + animationName + " {\n" + keyFramePercentages.join("\n") + "\n}";
          Styles.createSheet(animationName);
          Styles.insertStyle(animationName, frames);
          if (Effects.initialStyles.hasOwnProperty(effect)) {
            Styles.insertStyle(animationName, ".initial_" + animationName + " { " + Effects.initialStyles[effect] + " }");
          }
          if (Effects.finalStyles.hasOwnProperty(effect)) {
            Styles.insertStyle(animationName, ".final_" + animationName + " { " + Effects.finalStyles[effect] + " }");
          }
        };
        var cleanupCSS = exports2.cleanupCSS = function cleanupCSS2(_ref2) {
          var animationName = _ref2.animationName;
          Styles.removeSheet(animationName);
        };
      },
      /* 10 */
      /***/
      function(module2, exports2, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", {
          value: true
        });
        var _extends = Object.assign || function(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }
          return target;
        };
        var _createClass = function() {
          function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
              var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ("value" in descriptor)
                descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }
          return function(Constructor, protoProps, staticProps) {
            if (protoProps)
              defineProperties(Constructor.prototype, protoProps);
            if (staticProps)
              defineProperties(Constructor, staticProps);
            return Constructor;
          };
        }();
        var _react = __webpack_require__(1);
        var _react2 = _interopRequireDefault(_react);
        var _propTypes = __webpack_require__(6);
        var _propTypes2 = _interopRequireDefault(_propTypes);
        var _AnimatedLetter = __webpack_require__(8);
        var _AnimatedLetter2 = _interopRequireDefault(_AnimatedLetter);
        var _effectCSS = __webpack_require__(9);
        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj };
        }
        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }
        function _possibleConstructorReturn(self, call) {
          if (!self) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          }
          return call && (typeof call === "object" || typeof call === "function") ? call : self;
        }
        function _inherits(subClass, superClass) {
          if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
          }
          subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
          if (superClass)
            Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var propTypes = {
          text: _propTypes2.default.string.isRequired,
          // The text that will be animated
          iterations: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.oneOf(["infinite"])]),
          // The number of times each character will animate, an integer or the string 'infinite'
          effect: _propTypes2.default.string,
          // The name of the effect to be applied to the characters
          effectDuration: _propTypes2.default.number,
          // The number of seconds a single effect will last
          effectDelay: _propTypes2.default.number,
          // Average number of seconds between two instances of the effect being triggered on a character (actual amount is random, between 0 and 2 x effectDelay)
          effectChange: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
          // The value of the animated css property at the effect's apex (property depends on effect chosen)
          effectDirection: _propTypes2.default.string,
          // Some effects can have their direction specified (valid values depend on effect chosen)
          paused: _propTypes2.default.bool,
          // Should the animation be paused when first rendered
          initialStyle: _propTypes2.default.object
          // a style (css) object containing any styles to be applied to the characters as they are initialy rendered
        };
        var defaultProps = {
          iterations: "infinite",
          effect: "jump",
          effectDelay: 0.5,
          effectDuration: 0.3,
          effectChange: 1,
          effectDirection: "up",
          paused: false,
          initialStyle: {}
        };
        var Random = function(_React$Component) {
          _inherits(Random2, _React$Component);
          function Random2(props) {
            _classCallCheck(this, Random2);
            var _this = _possibleConstructorReturn(this, (Random2.__proto__ || Object.getPrototypeOf(Random2)).call(this, props));
            _this.animationName = "textAnim_" + props.effect + "_" + Math.round(Math.random() * 1e5);
            return _this;
          }
          _createClass(Random2, [{
            key: "componentDidMount",
            value: function componentDidMount() {
              var keyframesCSS = (0, _effectCSS.generateCSS)({
                effect: this.props.effect,
                effectLastKeyframe: 1,
                effectChange: this.props.effectChange,
                effectDirection: this.props.effectDirection,
                animationName: this.animationName
              });
            }
          }, {
            key: "componentWillUnmount",
            value: function componentWillUnmount() {
              (0, _effectCSS.cleanupCSS)(this.animationName);
            }
          }, {
            key: "nextMS",
            value: function nextMS() {
              return Math.random() * this.props.effectDelay * 2 * 1e3;
            }
          }, {
            key: "render",
            value: function render() {
              var _this2 = this;
              var AnimatedLetters = function AnimatedLetters2() {
                return _react2.default.createElement(
                  "div",
                  null,
                  _this2.props.text.split("").map(function(char, i) {
                    var key = Math.round(Math.random() * 1e4);
                    var animationStyles = {
                      animationName: _this2.animationName,
                      animationDuration: _this2.props.effectDuration + "s",
                      animationIterationCount: 1,
                      animationFillMode: "both",
                      display: "inline-block"
                    };
                    var wrapperStyles = {
                      display: "inline-block",
                      width: char == " " ? "0.5em" : "auto"
                    };
                    var animatedLetterProps = {
                      animationName: _this2.animationName,
                      animationStyles,
                      wrapperStyles,
                      animRequiresPauseAtEnd: true,
                      nextMS: function nextMS() {
                        return _this2.nextMS();
                      },
                      paused: _this2.props.paused,
                      manualIterations: _this2.props.iterations === "infinite" ? 99999 : _this2.props.iterations
                    };
                    return _react2.default.createElement(
                      _AnimatedLetter2.default,
                      _extends({}, animatedLetterProps, { key: key + "_" + i }),
                      char
                    );
                  })
                );
              };
              return _react2.default.createElement(AnimatedLetters, null);
            }
          }]);
          return Random2;
        }(_react2.default.Component);
        Random.propTypes = propTypes;
        Random.defaultProps = defaultProps;
        exports2.default = Random;
      },
      /* 11 */
      /***/
      function(module2, exports2, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", {
          value: true
        });
        var _extends = Object.assign || function(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }
          return target;
        };
        var _createClass = function() {
          function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
              var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ("value" in descriptor)
                descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }
          return function(Constructor, protoProps, staticProps) {
            if (protoProps)
              defineProperties(Constructor.prototype, protoProps);
            if (staticProps)
              defineProperties(Constructor, staticProps);
            return Constructor;
          };
        }();
        var _react = __webpack_require__(1);
        var _react2 = _interopRequireDefault(_react);
        var _propTypes = __webpack_require__(6);
        var _propTypes2 = _interopRequireDefault(_propTypes);
        var _AnimatedLetter = __webpack_require__(8);
        var _AnimatedLetter2 = _interopRequireDefault(_AnimatedLetter);
        var _effectCSS = __webpack_require__(9);
        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj };
        }
        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }
        function _possibleConstructorReturn(self, call) {
          if (!self) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          }
          return call && (typeof call === "object" || typeof call === "function") ? call : self;
        }
        function _inherits(subClass, superClass) {
          if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
          }
          subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
          if (superClass)
            Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var propTypes = {
          text: _propTypes2.default.string.isRequired,
          // The text that will be animated
          speed: _propTypes2.default.number,
          // The speed the wave travels - in characters per second
          direction: _propTypes2.default.oneOf(["right", "left"]),
          // The direction the wave will travel, either 'right' or 'left'
          iterations: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.oneOf(["infinite"])]),
          // The number of times the wave will animate, an integer or the string 'infinite'
          delay: _propTypes2.default.number,
          // The delay between each wave animation - in seconds
          paused: _propTypes2.default.bool,
          // Should the animation be paused when first rendered
          effect: _propTypes2.default.string,
          // The name of the effect to be applied to the characters
          effectDuration: _propTypes2.default.number,
          // The number of seconds a single effect will last
          effectChange: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
          // The value of the animated css property at the effect's apex (property depends on effect chosen)
          effectDirection: _propTypes2.default.string
          // Some effects can have their direction specified (valid values depend on effect chosen)
        };
        var defaultProps = {
          speed: 10,
          direction: "right",
          iterations: "infinite",
          delay: 0,
          paused: false,
          effect: "jump",
          effectDuration: 0.3,
          effectChange: 1,
          effectDirection: "up"
        };
        var Wave = function(_React$Component) {
          _inherits(Wave2, _React$Component);
          function Wave2(props) {
            _classCallCheck(this, Wave2);
            var _this = _possibleConstructorReturn(this, (Wave2.__proto__ || Object.getPrototypeOf(Wave2)).call(this, props));
            _this.animationName = "textAnim_" + props.effect + "_" + Math.round(Math.random() * 1e5);
            _this.animTime = _this.props.text.length / _this.props.speed;
            var delayRatio = _this.props.delay / _this.animTime;
            var delayScale = 1 / (delayRatio + 1);
            _this.duration = _this.animTime + _this.props.delay;
            _this.effectLastKeyframe = _this.props.effectDuration / _this.animTime * delayScale;
            return _this;
          }
          _createClass(Wave2, [{
            key: "componentDidMount",
            value: function componentDidMount() {
              var keyframesCSS = (0, _effectCSS.generateCSS)({
                effect: this.props.effect,
                effectLastKeyframe: this.effectLastKeyframe,
                effectChange: this.props.effectChange,
                effectDirection: this.props.effectDirection,
                animationName: this.animationName
              });
            }
          }, {
            key: "componentWillUnmount",
            value: function componentWillUnmount() {
              (0, _effectCSS.cleanupCSS)(this.animationName);
            }
          }, {
            key: "nextMS",
            value: function nextMS() {
              return 0;
            }
          }, {
            key: "render",
            value: function render() {
              var _this2 = this;
              var AnimatedLetters = function AnimatedLetters2() {
                return _react2.default.createElement(
                  "div",
                  null,
                  _this2.props.text.split("").map(function(char, i) {
                    var key = Math.round(Math.random() * 1e4);
                    var delay_multiplier = 1;
                    switch (_this2.props.direction) {
                      case "right":
                        delay_multiplier = i;
                        break;
                      case "left":
                        delay_multiplier = _this2.props.text.length - 1 - i;
                        break;
                    }
                    var delay = delay_multiplier === 0 ? 0 : _this2.animTime / _this2.props.text.length * delay_multiplier;
                    var animationStyles = {
                      animationName: _this2.animationName,
                      animationDuration: _this2.duration + "s",
                      animationIterationCount: "" + _this2.props.iterations,
                      animationDelay: delay + "s",
                      animationFillMode: "both",
                      display: "inline-block"
                    };
                    var wrapperStyles = {
                      display: "inline-block",
                      width: char == " " ? "0.5em" : "auto"
                    };
                    var animatedLetterProps = {
                      animationName: _this2.animationName,
                      animationStyles,
                      wrapperStyles,
                      animRequiresPauseAtEnd: false,
                      nextMS: function nextMS() {
                        return _this2.nextMS();
                      },
                      paused: _this2.props.paused
                    };
                    return _react2.default.createElement(
                      _AnimatedLetter2.default,
                      _extends({}, animatedLetterProps, { key: key + "_" + i }),
                      char
                    );
                  })
                );
              };
              return _react2.default.createElement(AnimatedLetters, null);
            }
          }]);
          return Wave2;
        }(_react2.default.Component);
        Wave.propTypes = propTypes;
        Wave.defaultProps = defaultProps;
        exports2.default = Wave;
      },
      /* 12 */
      /***/
      function(module2, exports2, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", {
          value: true
        });
        var _Wave = __webpack_require__(11);
        Object.defineProperty(exports2, "Wave", {
          enumerable: true,
          get: function get() {
            return _interopRequireDefault(_Wave).default;
          }
        });
        var _Random = __webpack_require__(10);
        Object.defineProperty(exports2, "Random", {
          enumerable: true,
          get: function get() {
            return _interopRequireDefault(_Random).default;
          }
        });
        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj };
        }
      },
      /* 13 */
      /***/
      function(module2, exports2, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", {
          value: true
        });
        var getDefinition = exports2.getDefinition = function getDefinition2(_ref) {
          var effect = _ref.effect, change = _ref.effectChange, direction = _ref.effectDirection;
          var sign = direction ? effectSigns[direction] : "";
          var origin = direction ? effectTransformOrigins[direction] : "";
          var definitions = {
            jump: {
              keyFrames: "bounce",
              a: "transform: translate(0em, 0em);",
              b: "transform: translate(0em, " + sign + change + "em);"
            },
            stretch: {
              keyFrames: "bounce",
              a: "transform: scale(1, 1); transform-origin: " + origin + ";",
              b: "transform: scale(1, " + change + ");"
            },
            color: {
              keyFrames: "bounce",
              a: "color: inherit;",
              b: "color: " + change + ";"
            },
            pop: {
              keyFrames: "bounce",
              a: "transform: scale(1, 1);",
              b: "transform: scale(" + change + ", " + change + ");"
            },
            fadeOut: {
              keyFrames: "oneWay",
              a: "opacity: inherit",
              b: "opacity: 0.0"
            },
            fadeIn: {
              keyFrames: "oneWay",
              a: "opacity: inherit",
              b: "opacity: 1.0;"
            },
            verticalFadeOut: {
              keyFrames: "oneWay",
              a: "opacity: 1.0;",
              b: "opacity: 0.0; transform: translate(0em, " + sign + change + "em);"
            },
            verticalFadeIn: {
              keyFrames: "oneWay",
              a: "opacity: 0.0; transform: translate(0em, " + sign + change + "em);",
              b: "opacity: 1.0; transform: translate(0em, 0em);"
            }
          };
          return definitions[effect];
        };
        var initialStyles = exports2.initialStyles = {
          fadeIn: "opacity: 0.0",
          verticalFadeIn: "opacity: 0.0"
        };
        var finalStyles = exports2.finalStyles = {
          fadeOut: "opacity: 0.0",
          verticalFadeOut: "opacity: 0.0"
        };
        var keyframeTemplates = exports2.keyframeTemplates = function keyframeTemplates2(_ref2) {
          var effectData = _ref2.effectData;
          return {
            bounce: [[0, effectData.a + " animation-timing-function: ease-in-out;"], [50, effectData.b + " animation-timing-function: ease-out-in;"], [99.99, "" + effectData.a], ["x", "" + effectData.a]],
            oneWay: [[0, effectData.a + " animation-timing-function: ease-in-out;"], [99.9, effectData.b + " animation-timing-function: ease-in-out;"], ["x", "" + effectData.b]]
          };
        };
        var effectSigns = {
          up: "-",
          down: "",
          both: "-"
        };
        var effectTransformOrigins = {
          up: "center 85%",
          down: "center 15%",
          both: "center"
        };
      },
      /* 14 */
      /***/
      function(module2, exports2, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", {
          value: true
        });
        var createSheet = exports2.createSheet = function createSheet2(id) {
          removeSheet(id);
          var styleElement = document.createElement("style");
          styleElement.setAttribute("id", id);
          document.head.appendChild(styleElement);
        };
        var removeSheet = exports2.removeSheet = function removeSheet2(id) {
          var styleElement = document.getElementById(id);
          if (styleElement) {
            document.head.removeChild(styleElement);
          }
        };
        var insertStyle = exports2.insertStyle = function insertStyle2(id, style) {
          var styleElement = document.getElementById(id);
          var styleSheet = styleElement.sheet;
          styleSheet.insertRule(style);
        };
      },
      /* 15 */
      /***/
      function(module2, exports2, __webpack_require__) {
        "use strict";
        (function(process) {
          var _assign = __webpack_require__(5);
          var emptyObject = __webpack_require__(17);
          var _invariant = __webpack_require__(2);
          if (process.env.NODE_ENV !== "production") {
            var warning = __webpack_require__(4);
          }
          var MIXINS_KEY = "mixins";
          function identity(fn) {
            return fn;
          }
          var ReactPropTypeLocationNames;
          if (process.env.NODE_ENV !== "production") {
            ReactPropTypeLocationNames = {
              prop: "prop",
              context: "context",
              childContext: "child context"
            };
          } else {
            ReactPropTypeLocationNames = {};
          }
          function factory(ReactComponent, isValidElement, ReactNoopUpdateQueue) {
            var injectedMixins = [];
            var ReactClassInterface = {
              /**
               * An array of Mixin objects to include when defining your component.
               *
               * @type {array}
               * @optional
               */
              mixins: "DEFINE_MANY",
              /**
               * An object containing properties and methods that should be defined on
               * the component's constructor instead of its prototype (static methods).
               *
               * @type {object}
               * @optional
               */
              statics: "DEFINE_MANY",
              /**
               * Definition of prop types for this component.
               *
               * @type {object}
               * @optional
               */
              propTypes: "DEFINE_MANY",
              /**
               * Definition of context types for this component.
               *
               * @type {object}
               * @optional
               */
              contextTypes: "DEFINE_MANY",
              /**
               * Definition of context types this component sets for its children.
               *
               * @type {object}
               * @optional
               */
              childContextTypes: "DEFINE_MANY",
              // ==== Definition methods ====
              /**
               * Invoked when the component is mounted. Values in the mapping will be set on
               * `this.props` if that prop is not specified (i.e. using an `in` check).
               *
               * This method is invoked before `getInitialState` and therefore cannot rely
               * on `this.state` or use `this.setState`.
               *
               * @return {object}
               * @optional
               */
              getDefaultProps: "DEFINE_MANY_MERGED",
              /**
               * Invoked once before the component is mounted. The return value will be used
               * as the initial value of `this.state`.
               *
               *   getInitialState: function() {
               *     return {
               *       isOn: false,
               *       fooBaz: new BazFoo()
               *     }
               *   }
               *
               * @return {object}
               * @optional
               */
              getInitialState: "DEFINE_MANY_MERGED",
              /**
               * @return {object}
               * @optional
               */
              getChildContext: "DEFINE_MANY_MERGED",
              /**
               * Uses props from `this.props` and state from `this.state` to render the
               * structure of the component.
               *
               * No guarantees are made about when or how often this method is invoked, so
               * it must not have side effects.
               *
               *   render: function() {
               *     var name = this.props.name;
               *     return <div>Hello, {name}!</div>;
               *   }
               *
               * @return {ReactComponent}
               * @required
               */
              render: "DEFINE_ONCE",
              // ==== Delegate methods ====
              /**
               * Invoked when the component is initially created and about to be mounted.
               * This may have side effects, but any external subscriptions or data created
               * by this method must be cleaned up in `componentWillUnmount`.
               *
               * @optional
               */
              componentWillMount: "DEFINE_MANY",
              /**
               * Invoked when the component has been mounted and has a DOM representation.
               * However, there is no guarantee that the DOM node is in the document.
               *
               * Use this as an opportunity to operate on the DOM when the component has
               * been mounted (initialized and rendered) for the first time.
               *
               * @param {DOMElement} rootNode DOM element representing the component.
               * @optional
               */
              componentDidMount: "DEFINE_MANY",
              /**
               * Invoked before the component receives new props.
               *
               * Use this as an opportunity to react to a prop transition by updating the
               * state using `this.setState`. Current props are accessed via `this.props`.
               *
               *   componentWillReceiveProps: function(nextProps, nextContext) {
               *     this.setState({
               *       likesIncreasing: nextProps.likeCount > this.props.likeCount
               *     });
               *   }
               *
               * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
               * transition may cause a state change, but the opposite is not true. If you
               * need it, you are probably looking for `componentWillUpdate`.
               *
               * @param {object} nextProps
               * @optional
               */
              componentWillReceiveProps: "DEFINE_MANY",
              /**
               * Invoked while deciding if the component should be updated as a result of
               * receiving new props, state and/or context.
               *
               * Use this as an opportunity to `return false` when you're certain that the
               * transition to the new props/state/context will not require a component
               * update.
               *
               *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
               *     return !equal(nextProps, this.props) ||
               *       !equal(nextState, this.state) ||
               *       !equal(nextContext, this.context);
               *   }
               *
               * @param {object} nextProps
               * @param {?object} nextState
               * @param {?object} nextContext
               * @return {boolean} True if the component should update.
               * @optional
               */
              shouldComponentUpdate: "DEFINE_ONCE",
              /**
               * Invoked when the component is about to update due to a transition from
               * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
               * and `nextContext`.
               *
               * Use this as an opportunity to perform preparation before an update occurs.
               *
               * NOTE: You **cannot** use `this.setState()` in this method.
               *
               * @param {object} nextProps
               * @param {?object} nextState
               * @param {?object} nextContext
               * @param {ReactReconcileTransaction} transaction
               * @optional
               */
              componentWillUpdate: "DEFINE_MANY",
              /**
               * Invoked when the component's DOM representation has been updated.
               *
               * Use this as an opportunity to operate on the DOM when the component has
               * been updated.
               *
               * @param {object} prevProps
               * @param {?object} prevState
               * @param {?object} prevContext
               * @param {DOMElement} rootNode DOM element representing the component.
               * @optional
               */
              componentDidUpdate: "DEFINE_MANY",
              /**
               * Invoked when the component is about to be removed from its parent and have
               * its DOM representation destroyed.
               *
               * Use this as an opportunity to deallocate any external resources.
               *
               * NOTE: There is no `componentDidUnmount` since your component will have been
               * destroyed by that point.
               *
               * @optional
               */
              componentWillUnmount: "DEFINE_MANY",
              // ==== Advanced methods ====
              /**
               * Updates the component's currently mounted DOM representation.
               *
               * By default, this implements React's rendering and reconciliation algorithm.
               * Sophisticated clients may wish to override this.
               *
               * @param {ReactReconcileTransaction} transaction
               * @internal
               * @overridable
               */
              updateComponent: "OVERRIDE_BASE"
            };
            var RESERVED_SPEC_KEYS = {
              displayName: function(Constructor, displayName) {
                Constructor.displayName = displayName;
              },
              mixins: function(Constructor, mixins) {
                if (mixins) {
                  for (var i = 0; i < mixins.length; i++) {
                    mixSpecIntoComponent(Constructor, mixins[i]);
                  }
                }
              },
              childContextTypes: function(Constructor, childContextTypes) {
                if (process.env.NODE_ENV !== "production") {
                  validateTypeDef(Constructor, childContextTypes, "childContext");
                }
                Constructor.childContextTypes = _assign(
                  {},
                  Constructor.childContextTypes,
                  childContextTypes
                );
              },
              contextTypes: function(Constructor, contextTypes) {
                if (process.env.NODE_ENV !== "production") {
                  validateTypeDef(Constructor, contextTypes, "context");
                }
                Constructor.contextTypes = _assign(
                  {},
                  Constructor.contextTypes,
                  contextTypes
                );
              },
              /**
               * Special case getDefaultProps which should move into statics but requires
               * automatic merging.
               */
              getDefaultProps: function(Constructor, getDefaultProps) {
                if (Constructor.getDefaultProps) {
                  Constructor.getDefaultProps = createMergedResultFunction(
                    Constructor.getDefaultProps,
                    getDefaultProps
                  );
                } else {
                  Constructor.getDefaultProps = getDefaultProps;
                }
              },
              propTypes: function(Constructor, propTypes) {
                if (process.env.NODE_ENV !== "production") {
                  validateTypeDef(Constructor, propTypes, "prop");
                }
                Constructor.propTypes = _assign({}, Constructor.propTypes, propTypes);
              },
              statics: function(Constructor, statics) {
                mixStaticSpecIntoComponent(Constructor, statics);
              },
              autobind: function() {
              }
            };
            function validateTypeDef(Constructor, typeDef, location) {
              for (var propName in typeDef) {
                if (typeDef.hasOwnProperty(propName)) {
                  if (process.env.NODE_ENV !== "production") {
                    warning(
                      typeof typeDef[propName] === "function",
                      "%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.",
                      Constructor.displayName || "ReactClass",
                      ReactPropTypeLocationNames[location],
                      propName
                    );
                  }
                }
              }
            }
            function validateMethodOverride(isAlreadyDefined, name) {
              var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;
              if (ReactClassMixin.hasOwnProperty(name)) {
                _invariant(
                  specPolicy === "OVERRIDE_BASE",
                  "ReactClassInterface: You are attempting to override `%s` from your class specification. Ensure that your method names do not overlap with React methods.",
                  name
                );
              }
              if (isAlreadyDefined) {
                _invariant(
                  specPolicy === "DEFINE_MANY" || specPolicy === "DEFINE_MANY_MERGED",
                  "ReactClassInterface: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.",
                  name
                );
              }
            }
            function mixSpecIntoComponent(Constructor, spec) {
              if (!spec) {
                if (process.env.NODE_ENV !== "production") {
                  var typeofSpec = typeof spec;
                  var isMixinValid = typeofSpec === "object" && spec !== null;
                  if (process.env.NODE_ENV !== "production") {
                    warning(
                      isMixinValid,
                      "%s: You're attempting to include a mixin that is either null or not an object. Check the mixins included by the component, as well as any mixins they include themselves. Expected object but got %s.",
                      Constructor.displayName || "ReactClass",
                      spec === null ? null : typeofSpec
                    );
                  }
                }
                return;
              }
              _invariant(
                typeof spec !== "function",
                "ReactClass: You're attempting to use a component class or function as a mixin. Instead, just use a regular object."
              );
              _invariant(
                !isValidElement(spec),
                "ReactClass: You're attempting to use a component as a mixin. Instead, just use a regular object."
              );
              var proto = Constructor.prototype;
              var autoBindPairs = proto.__reactAutoBindPairs;
              if (spec.hasOwnProperty(MIXINS_KEY)) {
                RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
              }
              for (var name in spec) {
                if (!spec.hasOwnProperty(name)) {
                  continue;
                }
                if (name === MIXINS_KEY) {
                  continue;
                }
                var property = spec[name];
                var isAlreadyDefined = proto.hasOwnProperty(name);
                validateMethodOverride(isAlreadyDefined, name);
                if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
                  RESERVED_SPEC_KEYS[name](Constructor, property);
                } else {
                  var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
                  var isFunction = typeof property === "function";
                  var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;
                  if (shouldAutoBind) {
                    autoBindPairs.push(name, property);
                    proto[name] = property;
                  } else {
                    if (isAlreadyDefined) {
                      var specPolicy = ReactClassInterface[name];
                      _invariant(
                        isReactClassMethod && (specPolicy === "DEFINE_MANY_MERGED" || specPolicy === "DEFINE_MANY"),
                        "ReactClass: Unexpected spec policy %s for key %s when mixing in component specs.",
                        specPolicy,
                        name
                      );
                      if (specPolicy === "DEFINE_MANY_MERGED") {
                        proto[name] = createMergedResultFunction(proto[name], property);
                      } else if (specPolicy === "DEFINE_MANY") {
                        proto[name] = createChainedFunction(proto[name], property);
                      }
                    } else {
                      proto[name] = property;
                      if (process.env.NODE_ENV !== "production") {
                        if (typeof property === "function" && spec.displayName) {
                          proto[name].displayName = spec.displayName + "_" + name;
                        }
                      }
                    }
                  }
                }
              }
            }
            function mixStaticSpecIntoComponent(Constructor, statics) {
              if (!statics) {
                return;
              }
              for (var name in statics) {
                var property = statics[name];
                if (!statics.hasOwnProperty(name)) {
                  continue;
                }
                var isReserved = name in RESERVED_SPEC_KEYS;
                _invariant(
                  !isReserved,
                  'ReactClass: You are attempting to define a reserved property, `%s`, that shouldn\'t be on the "statics" key. Define it as an instance property instead; it will still be accessible on the constructor.',
                  name
                );
                var isInherited = name in Constructor;
                _invariant(
                  !isInherited,
                  "ReactClass: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.",
                  name
                );
                Constructor[name] = property;
              }
            }
            function mergeIntoWithNoDuplicateKeys(one, two) {
              _invariant(
                one && two && typeof one === "object" && typeof two === "object",
                "mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects."
              );
              for (var key in two) {
                if (two.hasOwnProperty(key)) {
                  _invariant(
                    one[key] === void 0,
                    "mergeIntoWithNoDuplicateKeys(): Tried to merge two objects with the same key: `%s`. This conflict may be due to a mixin; in particular, this may be caused by two getInitialState() or getDefaultProps() methods returning objects with clashing keys.",
                    key
                  );
                  one[key] = two[key];
                }
              }
              return one;
            }
            function createMergedResultFunction(one, two) {
              return function mergedResult() {
                var a = one.apply(this, arguments);
                var b = two.apply(this, arguments);
                if (a == null) {
                  return b;
                } else if (b == null) {
                  return a;
                }
                var c = {};
                mergeIntoWithNoDuplicateKeys(c, a);
                mergeIntoWithNoDuplicateKeys(c, b);
                return c;
              };
            }
            function createChainedFunction(one, two) {
              return function chainedFunction() {
                one.apply(this, arguments);
                two.apply(this, arguments);
              };
            }
            function bindAutoBindMethod(component, method) {
              var boundMethod = method.bind(component);
              if (process.env.NODE_ENV !== "production") {
                boundMethod.__reactBoundContext = component;
                boundMethod.__reactBoundMethod = method;
                boundMethod.__reactBoundArguments = null;
                var componentName = component.constructor.displayName;
                var _bind = boundMethod.bind;
                boundMethod.bind = function(newThis) {
                  for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                    args[_key - 1] = arguments[_key];
                  }
                  if (newThis !== component && newThis !== null) {
                    if (process.env.NODE_ENV !== "production") {
                      warning(
                        false,
                        "bind(): React component methods may only be bound to the component instance. See %s",
                        componentName
                      );
                    }
                  } else if (!args.length) {
                    if (process.env.NODE_ENV !== "production") {
                      warning(
                        false,
                        "bind(): You are binding a component method to the component. React does this for you automatically in a high-performance way, so you can safely remove this call. See %s",
                        componentName
                      );
                    }
                    return boundMethod;
                  }
                  var reboundMethod = _bind.apply(boundMethod, arguments);
                  reboundMethod.__reactBoundContext = component;
                  reboundMethod.__reactBoundMethod = method;
                  reboundMethod.__reactBoundArguments = args;
                  return reboundMethod;
                };
              }
              return boundMethod;
            }
            function bindAutoBindMethods(component) {
              var pairs = component.__reactAutoBindPairs;
              for (var i = 0; i < pairs.length; i += 2) {
                var autoBindKey = pairs[i];
                var method = pairs[i + 1];
                component[autoBindKey] = bindAutoBindMethod(component, method);
              }
            }
            var IsMountedPreMixin = {
              componentDidMount: function() {
                this.__isMounted = true;
              }
            };
            var IsMountedPostMixin = {
              componentWillUnmount: function() {
                this.__isMounted = false;
              }
            };
            var ReactClassMixin = {
              /**
               * TODO: This will be deprecated because state should always keep a consistent
               * type signature and the only use case for this, is to avoid that.
               */
              replaceState: function(newState, callback) {
                this.updater.enqueueReplaceState(this, newState, callback);
              },
              /**
               * Checks whether or not this composite component is mounted.
               * @return {boolean} True if mounted, false otherwise.
               * @protected
               * @final
               */
              isMounted: function() {
                if (process.env.NODE_ENV !== "production") {
                  warning(
                    this.__didWarnIsMounted,
                    "%s: isMounted is deprecated. Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks.",
                    this.constructor && this.constructor.displayName || this.name || "Component"
                  );
                  this.__didWarnIsMounted = true;
                }
                return !!this.__isMounted;
              }
            };
            var ReactClassComponent = function() {
            };
            _assign(
              ReactClassComponent.prototype,
              ReactComponent.prototype,
              ReactClassMixin
            );
            function createClass(spec) {
              var Constructor = identity(function(props, context, updater) {
                if (process.env.NODE_ENV !== "production") {
                  warning(
                    this instanceof Constructor,
                    "Something is calling a React component directly. Use a factory or JSX instead. See: https://fb.me/react-legacyfactory"
                  );
                }
                if (this.__reactAutoBindPairs.length) {
                  bindAutoBindMethods(this);
                }
                this.props = props;
                this.context = context;
                this.refs = emptyObject;
                this.updater = updater || ReactNoopUpdateQueue;
                this.state = null;
                var initialState = this.getInitialState ? this.getInitialState() : null;
                if (process.env.NODE_ENV !== "production") {
                  if (initialState === void 0 && this.getInitialState._isMockFunction) {
                    initialState = null;
                  }
                }
                _invariant(
                  typeof initialState === "object" && !Array.isArray(initialState),
                  "%s.getInitialState(): must return an object or null",
                  Constructor.displayName || "ReactCompositeComponent"
                );
                this.state = initialState;
              });
              Constructor.prototype = new ReactClassComponent();
              Constructor.prototype.constructor = Constructor;
              Constructor.prototype.__reactAutoBindPairs = [];
              injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));
              mixSpecIntoComponent(Constructor, IsMountedPreMixin);
              mixSpecIntoComponent(Constructor, spec);
              mixSpecIntoComponent(Constructor, IsMountedPostMixin);
              if (Constructor.getDefaultProps) {
                Constructor.defaultProps = Constructor.getDefaultProps();
              }
              if (process.env.NODE_ENV !== "production") {
                if (Constructor.getDefaultProps) {
                  Constructor.getDefaultProps.isReactClassApproved = {};
                }
                if (Constructor.prototype.getInitialState) {
                  Constructor.prototype.getInitialState.isReactClassApproved = {};
                }
              }
              _invariant(
                Constructor.prototype.render,
                "createClass(...): Class specification must implement a `render` method."
              );
              if (process.env.NODE_ENV !== "production") {
                warning(
                  !Constructor.prototype.componentShouldUpdate,
                  "%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.",
                  spec.displayName || "A component"
                );
                warning(
                  !Constructor.prototype.componentWillRecieveProps,
                  "%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?",
                  spec.displayName || "A component"
                );
              }
              for (var methodName in ReactClassInterface) {
                if (!Constructor.prototype[methodName]) {
                  Constructor.prototype[methodName] = null;
                }
              }
              return Constructor;
            }
            return createClass;
          }
          module2.exports = factory;
        }).call(exports2, __webpack_require__(0));
      },
      /* 16 */
      /***/
      function(module2, exports2, __webpack_require__) {
        "use strict";
        var React = __webpack_require__(1);
        var factory = __webpack_require__(15);
        if (typeof React === "undefined") {
          throw Error(
            "create-react-class could not find the React object. If you are using script tags, make sure that React is being loaded before create-react-class."
          );
        }
        var ReactNoopUpdateQueue = new React.Component().updater;
        module2.exports = factory(
          React.Component,
          React.isValidElement,
          ReactNoopUpdateQueue
        );
      },
      /* 17 */
      /***/
      function(module2, exports2, __webpack_require__) {
        "use strict";
        (function(process) {
          var emptyObject = {};
          if (process.env.NODE_ENV !== "production") {
            Object.freeze(emptyObject);
          }
          module2.exports = emptyObject;
        }).call(exports2, __webpack_require__(0));
      },
      /* 18 */
      /***/
      function(module2, exports2, __webpack_require__) {
        "use strict";
        (function(process) {
          if (process.env.NODE_ENV !== "production") {
            var invariant = __webpack_require__(2);
            var warning = __webpack_require__(4);
            var ReactPropTypesSecret = __webpack_require__(7);
            var loggedTypeFailures = {};
          }
          function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
            if (process.env.NODE_ENV !== "production") {
              for (var typeSpecName in typeSpecs) {
                if (typeSpecs.hasOwnProperty(typeSpecName)) {
                  var error;
                  try {
                    invariant(typeof typeSpecs[typeSpecName] === "function", "%s: %s type `%s` is invalid; it must be a function, usually from the `prop-types` package, but received `%s`.", componentName || "React class", location, typeSpecName, typeof typeSpecs[typeSpecName]);
                    error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
                  } catch (ex) {
                    error = ex;
                  }
                  warning(!error || error instanceof Error, "%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error);
                  if (error instanceof Error && !(error.message in loggedTypeFailures)) {
                    loggedTypeFailures[error.message] = true;
                    var stack = getStack ? getStack() : "";
                    warning(false, "Failed %s type: %s%s", location, error.message, stack != null ? stack : "");
                  }
                }
              }
            }
          }
          module2.exports = checkPropTypes;
        }).call(exports2, __webpack_require__(0));
      },
      /* 19 */
      /***/
      function(module2, exports2, __webpack_require__) {
        "use strict";
        var emptyFunction = __webpack_require__(3);
        var invariant = __webpack_require__(2);
        var ReactPropTypesSecret = __webpack_require__(7);
        module2.exports = function() {
          function shim(props, propName, componentName, location, propFullName, secret) {
            if (secret === ReactPropTypesSecret) {
              return;
            }
            invariant(
              false,
              "Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types"
            );
          }
          ;
          shim.isRequired = shim;
          function getShim() {
            return shim;
          }
          ;
          var ReactPropTypes = {
            array: shim,
            bool: shim,
            func: shim,
            number: shim,
            object: shim,
            string: shim,
            symbol: shim,
            any: shim,
            arrayOf: getShim,
            element: shim,
            instanceOf: getShim,
            node: shim,
            objectOf: getShim,
            oneOf: getShim,
            oneOfType: getShim,
            shape: getShim,
            exact: getShim
          };
          ReactPropTypes.checkPropTypes = emptyFunction;
          ReactPropTypes.PropTypes = ReactPropTypes;
          return ReactPropTypes;
        };
      },
      /* 20 */
      /***/
      function(module2, exports2, __webpack_require__) {
        "use strict";
        (function(process) {
          var emptyFunction = __webpack_require__(3);
          var invariant = __webpack_require__(2);
          var warning = __webpack_require__(4);
          var assign = __webpack_require__(5);
          var ReactPropTypesSecret = __webpack_require__(7);
          var checkPropTypes = __webpack_require__(18);
          module2.exports = function(isValidElement, throwOnDirectAccess) {
            var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
            var FAUX_ITERATOR_SYMBOL = "@@iterator";
            function getIteratorFn(maybeIterable) {
              var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
              if (typeof iteratorFn === "function") {
                return iteratorFn;
              }
            }
            var ANONYMOUS = "<<anonymous>>";
            var ReactPropTypes = {
              array: createPrimitiveTypeChecker("array"),
              bool: createPrimitiveTypeChecker("boolean"),
              func: createPrimitiveTypeChecker("function"),
              number: createPrimitiveTypeChecker("number"),
              object: createPrimitiveTypeChecker("object"),
              string: createPrimitiveTypeChecker("string"),
              symbol: createPrimitiveTypeChecker("symbol"),
              any: createAnyTypeChecker(),
              arrayOf: createArrayOfTypeChecker,
              element: createElementTypeChecker(),
              instanceOf: createInstanceTypeChecker,
              node: createNodeChecker(),
              objectOf: createObjectOfTypeChecker,
              oneOf: createEnumTypeChecker,
              oneOfType: createUnionTypeChecker,
              shape: createShapeTypeChecker,
              exact: createStrictShapeTypeChecker
            };
            function is(x, y) {
              if (x === y) {
                return x !== 0 || 1 / x === 1 / y;
              } else {
                return x !== x && y !== y;
              }
            }
            function PropTypeError(message) {
              this.message = message;
              this.stack = "";
            }
            PropTypeError.prototype = Error.prototype;
            function createChainableTypeChecker(validate) {
              if (process.env.NODE_ENV !== "production") {
                var manualPropTypeCallCache = {};
                var manualPropTypeWarningCount = 0;
              }
              function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
                componentName = componentName || ANONYMOUS;
                propFullName = propFullName || propName;
                if (secret !== ReactPropTypesSecret) {
                  if (throwOnDirectAccess) {
                    invariant(
                      false,
                      "Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types"
                    );
                  } else if (process.env.NODE_ENV !== "production" && typeof console !== "undefined") {
                    var cacheKey = componentName + ":" + propName;
                    if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
                    manualPropTypeWarningCount < 3) {
                      warning(
                        false,
                        "You are manually calling a React.PropTypes validation function for the `%s` prop on `%s`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details.",
                        propFullName,
                        componentName
                      );
                      manualPropTypeCallCache[cacheKey] = true;
                      manualPropTypeWarningCount++;
                    }
                  }
                }
                if (props[propName] == null) {
                  if (isRequired) {
                    if (props[propName] === null) {
                      return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
                    }
                    return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
                  }
                  return null;
                } else {
                  return validate(props, propName, componentName, location, propFullName);
                }
              }
              var chainedCheckType = checkType.bind(null, false);
              chainedCheckType.isRequired = checkType.bind(null, true);
              return chainedCheckType;
            }
            function createPrimitiveTypeChecker(expectedType) {
              function validate(props, propName, componentName, location, propFullName, secret) {
                var propValue = props[propName];
                var propType = getPropType(propValue);
                if (propType !== expectedType) {
                  var preciseType = getPreciseType(propValue);
                  return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."));
                }
                return null;
              }
              return createChainableTypeChecker(validate);
            }
            function createAnyTypeChecker() {
              return createChainableTypeChecker(emptyFunction.thatReturnsNull);
            }
            function createArrayOfTypeChecker(typeChecker) {
              function validate(props, propName, componentName, location, propFullName) {
                if (typeof typeChecker !== "function") {
                  return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
                }
                var propValue = props[propName];
                if (!Array.isArray(propValue)) {
                  var propType = getPropType(propValue);
                  return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
                }
                for (var i = 0; i < propValue.length; i++) {
                  var error = typeChecker(propValue, i, componentName, location, propFullName + "[" + i + "]", ReactPropTypesSecret);
                  if (error instanceof Error) {
                    return error;
                  }
                }
                return null;
              }
              return createChainableTypeChecker(validate);
            }
            function createElementTypeChecker() {
              function validate(props, propName, componentName, location, propFullName) {
                var propValue = props[propName];
                if (!isValidElement(propValue)) {
                  var propType = getPropType(propValue);
                  return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
                }
                return null;
              }
              return createChainableTypeChecker(validate);
            }
            function createInstanceTypeChecker(expectedClass) {
              function validate(props, propName, componentName, location, propFullName) {
                if (!(props[propName] instanceof expectedClass)) {
                  var expectedClassName = expectedClass.name || ANONYMOUS;
                  var actualClassName = getClassName(props[propName]);
                  return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
                }
                return null;
              }
              return createChainableTypeChecker(validate);
            }
            function createEnumTypeChecker(expectedValues) {
              if (!Array.isArray(expectedValues)) {
                process.env.NODE_ENV !== "production" ? warning(false, "Invalid argument supplied to oneOf, expected an instance of array.") : void 0;
                return emptyFunction.thatReturnsNull;
              }
              function validate(props, propName, componentName, location, propFullName) {
                var propValue = props[propName];
                for (var i = 0; i < expectedValues.length; i++) {
                  if (is(propValue, expectedValues[i])) {
                    return null;
                  }
                }
                var valuesString = JSON.stringify(expectedValues);
                return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + propValue + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
              }
              return createChainableTypeChecker(validate);
            }
            function createObjectOfTypeChecker(typeChecker) {
              function validate(props, propName, componentName, location, propFullName) {
                if (typeof typeChecker !== "function") {
                  return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
                }
                var propValue = props[propName];
                var propType = getPropType(propValue);
                if (propType !== "object") {
                  return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
                }
                for (var key in propValue) {
                  if (propValue.hasOwnProperty(key)) {
                    var error = typeChecker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
                    if (error instanceof Error) {
                      return error;
                    }
                  }
                }
                return null;
              }
              return createChainableTypeChecker(validate);
            }
            function createUnionTypeChecker(arrayOfTypeCheckers) {
              if (!Array.isArray(arrayOfTypeCheckers)) {
                process.env.NODE_ENV !== "production" ? warning(false, "Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
                return emptyFunction.thatReturnsNull;
              }
              for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
                var checker = arrayOfTypeCheckers[i];
                if (typeof checker !== "function") {
                  warning(
                    false,
                    "Invalid argument supplied to oneOfType. Expected an array of check functions, but received %s at index %s.",
                    getPostfixForTypeWarning(checker),
                    i
                  );
                  return emptyFunction.thatReturnsNull;
                }
              }
              function validate(props, propName, componentName, location, propFullName) {
                for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
                  var checker2 = arrayOfTypeCheckers[i2];
                  if (checker2(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
                    return null;
                  }
                }
                return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`."));
              }
              return createChainableTypeChecker(validate);
            }
            function createNodeChecker() {
              function validate(props, propName, componentName, location, propFullName) {
                if (!isNode(props[propName])) {
                  return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
                }
                return null;
              }
              return createChainableTypeChecker(validate);
            }
            function createShapeTypeChecker(shapeTypes) {
              function validate(props, propName, componentName, location, propFullName) {
                var propValue = props[propName];
                var propType = getPropType(propValue);
                if (propType !== "object") {
                  return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
                }
                for (var key in shapeTypes) {
                  var checker = shapeTypes[key];
                  if (!checker) {
                    continue;
                  }
                  var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
                  if (error) {
                    return error;
                  }
                }
                return null;
              }
              return createChainableTypeChecker(validate);
            }
            function createStrictShapeTypeChecker(shapeTypes) {
              function validate(props, propName, componentName, location, propFullName) {
                var propValue = props[propName];
                var propType = getPropType(propValue);
                if (propType !== "object") {
                  return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
                }
                var allKeys = assign({}, props[propName], shapeTypes);
                for (var key in allKeys) {
                  var checker = shapeTypes[key];
                  if (!checker) {
                    return new PropTypeError(
                      "Invalid " + location + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  ")
                    );
                  }
                  var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
                  if (error) {
                    return error;
                  }
                }
                return null;
              }
              return createChainableTypeChecker(validate);
            }
            function isNode(propValue) {
              switch (typeof propValue) {
                case "number":
                case "string":
                case "undefined":
                  return true;
                case "boolean":
                  return !propValue;
                case "object":
                  if (Array.isArray(propValue)) {
                    return propValue.every(isNode);
                  }
                  if (propValue === null || isValidElement(propValue)) {
                    return true;
                  }
                  var iteratorFn = getIteratorFn(propValue);
                  if (iteratorFn) {
                    var iterator = iteratorFn.call(propValue);
                    var step;
                    if (iteratorFn !== propValue.entries) {
                      while (!(step = iterator.next()).done) {
                        if (!isNode(step.value)) {
                          return false;
                        }
                      }
                    } else {
                      while (!(step = iterator.next()).done) {
                        var entry = step.value;
                        if (entry) {
                          if (!isNode(entry[1])) {
                            return false;
                          }
                        }
                      }
                    }
                  } else {
                    return false;
                  }
                  return true;
                default:
                  return false;
              }
            }
            function isSymbol(propType, propValue) {
              if (propType === "symbol") {
                return true;
              }
              if (propValue["@@toStringTag"] === "Symbol") {
                return true;
              }
              if (typeof Symbol === "function" && propValue instanceof Symbol) {
                return true;
              }
              return false;
            }
            function getPropType(propValue) {
              var propType = typeof propValue;
              if (Array.isArray(propValue)) {
                return "array";
              }
              if (propValue instanceof RegExp) {
                return "object";
              }
              if (isSymbol(propType, propValue)) {
                return "symbol";
              }
              return propType;
            }
            function getPreciseType(propValue) {
              if (typeof propValue === "undefined" || propValue === null) {
                return "" + propValue;
              }
              var propType = getPropType(propValue);
              if (propType === "object") {
                if (propValue instanceof Date) {
                  return "date";
                } else if (propValue instanceof RegExp) {
                  return "regexp";
                }
              }
              return propType;
            }
            function getPostfixForTypeWarning(value) {
              var type = getPreciseType(value);
              switch (type) {
                case "array":
                case "object":
                  return "an " + type;
                case "boolean":
                case "date":
                case "regexp":
                  return "a " + type;
                default:
                  return type;
              }
            }
            function getClassName(propValue) {
              if (!propValue.constructor || !propValue.constructor.name) {
                return ANONYMOUS;
              }
              return propValue.constructor.name;
            }
            ReactPropTypes.checkPropTypes = checkPropTypes;
            ReactPropTypes.PropTypes = ReactPropTypes;
            return ReactPropTypes;
          };
        }).call(exports2, __webpack_require__(0));
      },
      /* 21 */
      /***/
      function(module2, exports2, __webpack_require__) {
        (function(global) {
          var createReactClass = __webpack_require__(16);
          var objectAssign = __webpack_require__(5);
          var createReactTimeout = function(React) {
            var GLOBAL = typeof window === "undefined" ? global : window;
            var setter = function(_setter, _clearer, array) {
              return function(callback, delta) {
                var id = _setter((function() {
                  _clearer.call(this, id);
                  callback.apply(this, arguments);
                }).bind(this), delta);
                if (!this[array]) {
                  this[array] = [id];
                } else {
                  this[array].push(id);
                }
                return id;
              };
            };
            var clearer = function(_clearer, array) {
              return function(id) {
                if (this[array]) {
                  var index = this[array].indexOf(id);
                  if (index !== -1) {
                    this[array].splice(index, 1);
                  }
                }
                _clearer(id);
              };
            };
            var _timeouts = "_ReactTimeout_timeouts";
            var _clearTimeout = clearer(GLOBAL.clearTimeout, _timeouts);
            var _setTimeout = setter(GLOBAL.setTimeout, _clearTimeout, _timeouts);
            var _intervals = "_ReactTimeout_intervals";
            var _clearInterval = clearer(GLOBAL.clearInterval, _intervals);
            var _setInterval = setter(GLOBAL.setInterval, function() {
            }, _intervals);
            var _immediates = "_ReactTimeout_immediates";
            var _clearImmediate = clearer(GLOBAL.clearImmediate, _immediates);
            var _setImmediate = setter(GLOBAL.setImmediate, _clearImmediate, _immediates);
            var _rafs = "_ReactTimeout_rafs";
            var _cancelAnimationFrame = clearer(GLOBAL.cancelAnimationFrame, _rafs);
            var _requestAnimationFrame = setter(GLOBAL.requestAnimationFrame, _cancelAnimationFrame, _rafs);
            var cloneArray = function(a) {
              return !a || typeof a.slice !== "function" ? [] : a.slice(0);
            };
            var ReactTimeout = function(SourceComponent) {
              return createReactClass({
                displayName: "ReactTimeout",
                setTimeout: _setTimeout,
                clearTimeout: _clearTimeout,
                setInterval: _setInterval,
                clearInterval: _clearInterval,
                setImmediate: _setImmediate,
                clearImmediate: _clearImmediate,
                requestAnimationFrame: _requestAnimationFrame,
                cancelAnimationFrame: _cancelAnimationFrame,
                componentWillUnmount: function() {
                  cloneArray(this[_timeouts]).forEach(this.clearTimeout);
                  cloneArray(this[_intervals]).forEach(this.clearInterval);
                  cloneArray(this[_immediates]).forEach(this.clearImmediate);
                  cloneArray(this[_rafs]).forEach(this.cancelAnimationFrame);
                },
                render: function() {
                  return React.createElement(
                    SourceComponent,
                    objectAssign(
                      {},
                      this.props,
                      {
                        setTimeout: this.setTimeout,
                        clearTimeout: this.clearTimeout,
                        setInterval: this.setInterval,
                        clearInterval: this.clearInterval,
                        setImmediate: this.setImmediate,
                        clearImmediate: this.clearImmediate,
                        requestAnimationFrame: this.requestAnimationFrame,
                        cancelAnimationFrame: this.cancelAnimationFrame
                      }
                    )
                  );
                }
              });
            };
            return ReactTimeout;
          };
          module2.exports = createReactTimeout;
        }).call(exports2, __webpack_require__(23));
      },
      /* 22 */
      /***/
      function(module2, exports2, __webpack_require__) {
        var React = __webpack_require__(1);
        var createReactTimeout = __webpack_require__(21);
        module2.exports = createReactTimeout(React);
      },
      /* 23 */
      /***/
      function(module2, exports2) {
        var g;
        g = function() {
          return this;
        }();
        try {
          g = g || Function("return this")() || (1, eval)("this");
        } catch (e) {
          if (typeof window === "object")
            g = window;
        }
        module2.exports = g;
      }
      /******/
    ]);
  }
});
export default require_build();
/*! Bundled license information:

react-animated-text/build/index.js:
  (*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  *)
*/
//# sourceMappingURL=react-animated-text.js.map
